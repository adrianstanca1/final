import React, { useState } from 'react';
import { Card } from './ui/Card';
import { Button } from './ui/Button';
import { TenderOpportunity, AnalysisReport, WinStrategy, TenderResponse } from '../types/procurement';
import { AnalystAgent, StrategistAgent, WriterAgent } from '../services/procurementAgents';

interface ProcurementChainProps {
  tenders: TenderOpportunity[];
  onAnalysisComplete?: (analysis: AnalysisReport) => void;
}

export const ProcurementChain: React.FC<ProcurementChainProps> = ({ tenders, onAnalysisComplete }) => {
  const [selectedTender, setSelectedTender] = useState<TenderOpportunity | null>(null);
  const [analysis, setAnalysis] = useState<AnalysisReport | null>(null);
  const [strategy, setStrategy] = useState<WinStrategy | null>(null);
  const [response, setResponse] = useState<TenderResponse | null>(null);
  const [isProcessing, setIsProcessing] = useState(false);
  const [currentStep, setCurrentStep] = useState<'select' | 'analyze' | 'strategize' | 'write' | 'complete'>('select');
  const [showDocument, setShowDocument] = useState(false);

  const analystAgent = new AnalystAgent();
  const strategistAgent = new StrategistAgent();
  const writerAgent = new WriterAgent();

  const runFullChain = async (tender: TenderOpportunity) => {
    if (!tender) return;

    setIsProcessing(true);
    setSelectedTender(tender);
    setCurrentStep('analyze');

    try {
      // Step 1: Analysis
      toast.loading('Analyzing tender opportunity...', { id: 'procurement-chain' });
      const analysisResult = await analystAgent.analyzeTender(tender);
      setAnalysis(analysisResult);
      setCurrentStep('strategize');

      if (onAnalysisComplete) {
        onAnalysisComplete(analysisResult);
      }

      // Step 2: Strategy
      toast.loading('Developing win strategy...', { id: 'procurement-chain' });
      const strategyResult = await strategistAgent.developStrategy(tender, analysisResult);
      setStrategy(strategyResult);
      setCurrentStep('write');

      // Step 3: Writing
      toast.loading('Drafting tender response...', { id: 'procurement-chain' });
      const responseResult = await writerAgent.draftResponse(tender, analysisResult, strategyResult);
      setResponse(responseResult);
      setCurrentStep('complete');

      toast.success('Procurement analysis complete!', { id: 'procurement-chain' });
    } catch (error) {
      console.error('Error in procurement chain:', error);
      toast.error('Failed to complete analysis. Please try again.', { id: 'procurement-chain' });
    } finally {
      setIsProcessing(false);
    }
  };

  const getMatchScoreColor = (score: number) => {
    if (score >= 80) return 'text-green-600';
    if (score >= 60) return 'text-yellow-600';
    return 'text-red-600';
  };

  const getRecommendationBadge = (recommendation: string) => {
    const colors = {
      highly_recommended: 'bg-green-100 text-green-800',
      recommended: 'bg-blue-100 text-blue-800',
      consider: 'bg-yellow-100 text-yellow-800',
      not_recommended: 'bg-red-100 text-red-800'
    };
    return colors[recommendation as keyof typeof colors] || colors.consider;
  };

  const downloadDocument = () => {
    if (!response || !selectedTender) return;

    const content = `# Tender Response: ${selectedTender.title}

${response.fullDocument}

---
Generated by AI Procurement System on ${new Date(response.generatedAt).toLocaleDateString()}
`;

    const blob = new Blob([content], { type: 'text/markdown' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `tender-response-${selectedTender.title.replace(/[^a-z0-9]/gi, '-').toLowerCase()}.md`;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
  };

  return (
    <div className="space-y-6">
      {/* Progress Indicator */}
      <Card className="p-4">
        <div className="flex items-center justify-between mb-4">
          <h2 className="text-xl font-semibold flex items-center gap-2">
            <Brain className="w-5 h-5" />
            AI Procurement Analysis Chain
          </h2>
          {isProcessing && (
            <div className="flex items-center gap-2 text-blue-600">
              <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-blue-600"></div>
              Processing...
            </div>
          )}
        </div>

        {/* Step Progress */}
        <div className="flex items-center gap-4 mb-4">
          {[
            { id: 'select', label: 'Select Tender', icon: Target },
            { id: 'analyze', label: 'Analyze', icon: Brain },
            { id: 'strategize', label: 'Strategy', icon: TrendingUp },
            { id: 'write', label: 'Draft', icon: FileText },
            { id: 'complete', label: 'Complete', icon: CheckCircle }
          ].map((step, index) => {
            const Icon = step.icon;
            const isActive = currentStep === step.id;
            const isCompleted = ['select', 'analyze', 'strategize', 'write'].indexOf(currentStep) > ['select', 'analyze', 'strategize', 'write'].indexOf(step.id);
            
            return (
              <div key={step.id} className="flex items-center gap-2">
                <div className={`w-8 h-8 rounded-full flex items-center justify-center ${
                  isCompleted ? 'bg-green-100 text-green-600' :
                  isActive ? 'bg-blue-100 text-blue-600' :
                  'bg-gray-100 text-gray-400'
                }`}>
                  <Icon className="w-4 h-4" />
                </div>
                <span className={`text-sm ${
                  isCompleted ? 'text-green-600' :
                  isActive ? 'text-blue-600' :
                  'text-gray-400'
                }`}>
                  {step.label}
                </span>
                {index < 4 && <div className="w-8 h-0.5 bg-gray-200" />}
              </div>
            );
          })}
        </div>
      </Card>

      {/* Tender Selection */}
      {currentStep === 'select' && (
        <Card className="p-6">
          <h3 className="text-lg font-semibold mb-4">Select Tender for Analysis</h3>
          <div className="grid gap-4">
            {tenders.map((tender) => (
              <Card key={tender.id} className="p-4 hover:shadow-md transition-shadow cursor-pointer" onClick={() => runFullChain(tender)}>
                <div className="flex items-start justify-between">
                  <div className="flex-1">
                    <h4 className="font-semibold text-slate-900">{tender.title}</h4>
                    <p className="text-sm text-slate-600 mt-1">{tender.client}</p>
                    <div className="flex items-center gap-4 mt-2 text-sm text-slate-500">
                      <span>£{tender.value.toLocaleString()}</span>
                      <span>{tender.location}</span>
                      <span>Deadline: {new Date(tender.deadline).toLocaleDateString()}</span>
                    </div>
                  </div>
                  <Badge variant="secondary">{tender.category}</Badge>
                </div>
              </Card>
            ))}
          </div>
        </Card>
      )}

      {/* Analysis Results */}
      {analysis && selectedTender && (
        <Tabs defaultValue="analysis" className="space-y-4">
          <TabsList>
            <TabsTrigger value="analysis">Analysis Report</TabsTrigger>
            {strategy && <TabsTrigger value="strategy">Win Strategy</TabsTrigger>}
            {response && <TabsTrigger value="response">Tender Response</TabsTrigger>}
          </TabsList>

          <TabsContent value="analysis">
            <Card className="p-6">
              <div className="flex items-center justify-between mb-4">
                <h3 className="text-lg font-semibold">Feasibility Analysis</h3>
                <div className="flex items-center gap-2">
                  <span className="text-sm text-slate-600">Match Score:</span>
                  <span className={`text-2xl font-bold ${getMatchScoreColor(analysis.matchScore)}`}>
                    {analysis.matchScore}%
                  </span>
                </div>
              </div>

              <div className="mb-4">
                <Badge className={getRecommendationBadge(analysis.recommendation)}>
                  {analysis.recommendation.replace('_', ' ').toUpperCase()}
                </Badge>
              </div>

              <div className="grid md:grid-cols-2 gap-6">
                <div>
                  <h4 className="font-semibold text-green-700 mb-2 flex items-center gap-2">
                    <CheckCircle className="w-4 h-4" />
                    Our Strengths
                  </h4>
                  <ul className="space-y-1">
                    {analysis.ourStrengths.map((strength, idx) => (
                      <li key={idx} className="text-sm text-slate-600">• {strength}</li>
                    ))}
                  </ul>
                </div>

                <div>
                  <h4 className="font-semibold text-orange-700 mb-2 flex items-center gap-2">
                    <AlertTriangle className="w-4 h-4" />
                    Potential Gaps
                  </h4>
                  <ul className="space-y-1">
                    {analysis.potentialGaps.map((gap, idx) => (
                      <li key={idx} className="text-sm text-slate-600">• {gap}</li>
                    ))}
                  </ul>
                </div>
              </div>

              <div className="mt-6">
                <h4 className="font-semibold mb-2">Key Requirements</h4>
                <div className="flex flex-wrap gap-2">
                  {analysis.keyRequirements.map((req, idx) => (
                    <Badge key={idx} variant="outline">{req}</Badge>
                  ))}
                </div>
              </div>

              <div className="mt-6 p-4 bg-slate-50 rounded-lg">
                <h4 className="font-semibold mb-2">Detailed Analysis</h4>
                <p className="text-sm text-slate-600 whitespace-pre-line">{analysis.analysis}</p>
              </div>
            </Card>
          </TabsContent>

          {strategy && (
            <TabsContent value="strategy">
              <Card className="p-6">
                <h3 className="text-lg font-semibold mb-4">Win Strategy</h3>
                
                <div className="mb-6 p-4 bg-blue-50 rounded-lg">
                  <h4 className="font-semibold text-blue-800 mb-2">Win Theme</h4>
                  <p className="text-blue-700 font-medium">{strategy.winTheme}</p>
                </div>

                <div className="space-y-6">
                  <div>
                    <h4 className="font-semibold mb-3 flex items-center gap-2">
                      <Target className="w-4 h-4" />
                      Key Selling Points
                    </h4>
                    <div className="space-y-3">
                      {strategy.keySellingPoints.map((point, idx) => (
                        <div key={idx} className="border rounded-lg p-3">
                          <div className="font-medium text-slate-900">{point.point}</div>
                          <div className="text-sm text-slate-600 mt-1">
                            <strong>Relevance:</strong> {point.relevance}
                          </div>
                          <div className="text-sm text-slate-600 mt-1">
                            <strong>Evidence:</strong> {point.evidence}
                          </div>
                        </div>
                      ))}
                    </div>
                  </div>

                  <div>
                    <h4 className="font-semibold mb-3">Risk Mitigation</h4>
                    <div className="space-y-2">
                      {strategy.riskMitigation.map((item, idx) => (
                        <div key={idx} className="flex gap-3 p-3 bg-yellow-50 rounded-lg">
                          <AlertTriangle className="w-4 h-4 text-yellow-600 mt-0.5 flex-shrink-0" />
                          <div>
                            <div className="font-medium text-yellow-800">{item.risk}</div>
                            <div className="text-sm text-yellow-700 mt-1">{item.mitigation}</div>
                          </div>
                        </div>
                      ))}
                    </div>
                  </div>

                  <div>
                    <h4 className="font-semibold mb-3">Evidence to Include</h4>
                    <div className="flex flex-wrap gap-2">
                      {strategy.evidenceToInclude.map((evidence, idx) => (
                        <Badge key={idx} variant="outline">{evidence}</Badge>
                      ))}
                    </div>
                  </div>
                </div>
              </Card>
            </TabsContent>
          )}

          {response && (
            <TabsContent value="response">
              <Card className="p-6">
                <div className="flex items-center justify-between mb-4">
                  <h3 className="text-lg font-semibold">Tender Response Draft</h3>
                  <div className="flex gap-2">
                    <Button variant="outline" size="sm" onClick={() => setShowDocument(true)}>
                      <Eye className="w-4 h-4 mr-2" />
                      Preview
                    </Button>
                    <Button variant="outline" size="sm" onClick={downloadDocument}>
                      <Download className="w-4 h-4 mr-2" />
                      Download
                    </Button>
                  </div>
                </div>

                <div className="space-y-4">
                  <div className="p-4 bg-slate-50 rounded-lg">
                    <h4 className="font-semibold mb-2">Executive Summary</h4>
                    <p className="text-sm text-slate-600">{response.executiveSummary}</p>
                  </div>

                  <div className="grid md:grid-cols-2 gap-4">
                    <div className="p-4 border rounded-lg">
                      <h4 className="font-semibold mb-2">Understanding of Requirements</h4>
                      <p className="text-sm text-slate-600">{response.understandingOfRequirements}</p>
                    </div>

                    <div className="p-4 border rounded-lg">
                      <h4 className="font-semibold mb-2">Risk Management</h4>
                      <p className="text-sm text-slate-600">{response.riskManagement}</p>
                    </div>
                  </div>

                  <div className="p-4 bg-green-50 rounded-lg">
                    <h4 className="font-semibold text-green-800 mb-2">Conclusion</h4>
                    <p className="text-sm text-green-700">{response.conclusion}</p>
                  </div>
                </div>
              </Card>
            </TabsContent>
          )}
        </Tabs>
      )}

      {/* Document Preview Modal */}
      {showDocument && response && selectedTender && (
        <Modal 
          isOpen={showDocument} 
          onClose={() => setShowDocument(false)}
          title={`Tender Response: ${selectedTender.title}`}
          size="xl"
        >
          <div className="max-h-96 overflow-y-auto p-4 bg-white rounded border">
            <pre className="whitespace-pre-wrap text-sm">{response.fullDocument}</pre>
          </div>
          <div className="flex justify-end gap-2 mt-4">
            <Button variant="outline" onClick={() => setShowDocument(false)}>
              Close
            </Button>
            <Button onClick={downloadDocument}>
              <Download className="w-4 h-4 mr-2" />
              Download
            </Button>
          </div>
        </Modal>
      )}
    </div>
  );
};