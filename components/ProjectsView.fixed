import React, { useState, useEffect, useCallback, useMemo } from 'react';
import { User, Project, Permission, ProjectStatus, ProjectPortfolioSummary } from '../types';
import { api } from '../services/mockApi';
import { hasPermission } from '../services/auth';
import { Card } from './ui/Card';
import { Button } from './ui/Button';
import { Tag } from './ui/Tag';
import { ViewHeader } from './layout/ViewHeader';
import { CreateProjectModal } from './CreateProjectModal';
import { ProjectDetailView } from './ProjectDetailView';
import { ProjectsMapView } from './ProjectsMapView';
import { LoadingSpinner } from './ui/LoadingSpinner';
import { 
  PlusIcon,
  MapIcon,
  ListBulletIcon,
  MagnifyingGlassIcon
} from '@heroicons/react/24/outline';

// Status color mappings
const statusBarColor: Record<ProjectStatus, string> = {
  PLANNING: 'bg-sky-500',
  ACTIVE: 'bg-emerald-500',
  ON_HOLD: 'bg-amber-500',
  COMPLETED: 'bg-primary',
  CANCELLED: 'bg-rose-500',
};

const statusTagColor: Record<ProjectStatus, 'green' | 'blue' | 'red' | 'gray' | 'yellow'> = {
  PLANNING: 'blue',
  ACTIVE: 'green',
  ON_HOLD: 'yellow',
  COMPLETED: 'green',
  CANCELLED: 'red',
};

type SortKey = 'startDate' | 'endDate' | 'name' | 'budget' | 'progress';

interface ProjectCardProps {
  project: Project;
  onClick: () => void;
}

const ProjectCard: React.FC<ProjectCardProps> = ({ project, onClick }) => {
  const progressPercentage = Math.round(project.progress || 0);
  const budgetDisplay = (project.budget / 1000).toFixed(0);

  return (
    <Card className="cursor-pointer hover:shadow-md transition-shadow" onClick={onClick}>
      <div className="p-6">
        <div className="flex items-start justify-between mb-4">
          <div>
            <h3 className="text-xl font-semibold text-slate-800 mb-2">{project.name}</h3>
            <p className="text-slate-600 text-sm mb-3">{project.description}</p>
          </div>
          <Tag 
            label={project.status} 
            color={statusTagColor[project.status]} 
          />
        </div>

        <div className="space-y-3">
          <div className="flex justify-between items-center text-sm">
            <span className="text-slate-600">Progress</span>
            <span className="font-medium">{progressPercentage}%</span>
          </div>
          
          <div className="w-full bg-slate-200 rounded-full h-2">
            <div 
              className="bg-primary rounded-full h-2 transition-all duration-300"
              style={{ width: `${Math.min(100, progressPercentage)}%` }}
            />
          </div>

          <div className="flex justify-between items-center text-sm pt-2">
            <span className="text-slate-600">Budget: £{budgetDisplay}k</span>
            <div className="flex items-center space-x-4">
              <span className="text-slate-600">
                Start: {new Date(project.startDate).toLocaleDateString()}
              </span>
              <span className="text-slate-600">
                End: {new Date(project.endDate).toLocaleDateString()}
              </span>
            </div>
          </div>
        </div>
      </div>
      
      <div 
        className={`h-1 ${statusBarColor[project.status]}`}
        aria-label={`Project status: ${project.status}`}
      />
    </Card>
  );
};

interface ProjectsViewProps {
  user: User;
}

const ProjectsView: React.FC<ProjectsViewProps> = ({ user }) => {
  const [projects, setProjects] = useState<Project[]>([]);
  const [filteredProjects, setFilteredProjects] = useState<Project[]>([]);
  const [portfolio, setPortfolio] = useState<ProjectPortfolioSummary | null>(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [viewMode, setViewMode] = useState<'grid' | 'map'>('grid');
  const [selectedProject, setSelectedProject] = useState<Project | null>(null);
  const [showCreateModal, setShowCreateModal] = useState(false);
  const [searchTerm, setSearchTerm] = useState('');
  const [statusFilter, setStatusFilter] = useState<ProjectStatus | 'ALL'>('ALL');
  const [sortBy, setSortBy] = useState<SortKey>('startDate');
  const [sortOrder, setSortOrder] = useState<'asc' | 'desc'>('desc');

  const loadProjects = useCallback(async () => {
    try {
      setLoading(true);
      setError(null);

      const [projectsData, portfolioData] = await Promise.all([
        api.getProjects(),
        api.getProjectPortfolioSummary()
      ]);

      setProjects(projectsData);
      setPortfolio(portfolioData);
    } catch (err) {
      console.error('Error loading projects:', err);
      setError('Failed to load projects. Please try again.');
    } finally {
      setLoading(false);
    }
  }, []);

  useEffect(() => {
    loadProjects();
  }, [loadProjects]);

  // Filter and sort projects
  const processedProjects = useMemo(() => {
    let filtered = projects.filter(project => {
      const matchesSearch = project.name.toLowerCase().includes(searchTerm.toLowerCase()) ||
                          project.description.toLowerCase().includes(searchTerm.toLowerCase());
      const matchesStatus = statusFilter === 'ALL' || project.status === statusFilter;
      
      return matchesSearch && matchesStatus;
    });

    // Sort projects
    filtered.sort((a, b) => {
      let aValue, bValue;
      
      switch (sortBy) {
        case 'name':
          aValue = a.name.toLowerCase();
          bValue = b.name.toLowerCase();
          break;
        case 'budget':
          aValue = a.budget;
          bValue = b.budget;
          break;
        case 'progress':
          aValue = a.progress || 0;
          bValue = b.progress || 0;
          break;
        case 'startDate':
          aValue = new Date(a.startDate).getTime();
          bValue = new Date(b.startDate).getTime();
          break;
        case 'endDate':
          aValue = new Date(a.endDate).getTime();
          bValue = new Date(b.endDate).getTime();
          break;
        default:
          return 0;
      }
      
      if (aValue < bValue) return sortOrder === 'asc' ? -1 : 1;
      if (aValue > bValue) return sortOrder === 'asc' ? 1 : -1;
      return 0;
    });

    return filtered;
  }, [projects, searchTerm, statusFilter, sortBy, sortOrder]);

  useEffect(() => {
    setFilteredProjects(processedProjects);
  }, [processedProjects]);

  const handleCreateProject = useCallback(async (projectData: any) => {
    try {
      await api.createProject(projectData);
      await loadProjects();
      setShowCreateModal(false);
    } catch (err) {
      console.error('Error creating project:', err);
      setError('Failed to create project. Please try again.');
    }
  }, [loadProjects]);

  const canCreateProjects = hasPermission(user, Permission.CREATE_PROJECTS);

  if (selectedProject) {
    return (
      <ProjectDetailView
        project={selectedProject}
        user={user}
        onBack={() => setSelectedProject(null)}
        onUpdate={loadProjects}
      />
    );
  }

  if (loading) {
    return (
      <div className="flex items-center justify-center h-96">
        <LoadingSpinner size="lg" />
      </div>
    );
  }

  return (
    <div className="space-y-6">
      <ViewHeader title="Projects" />
      
      {/* Portfolio Summary */}
      {portfolio && (
        <div className="grid grid-cols-1 md:grid-cols-4 gap-6">
          <Card className="p-6">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-sm text-slate-600">Total Projects</p>
                <p className="text-2xl font-bold text-slate-800">{portfolio.totalProjects}</p>
              </div>
              <div className="w-12 h-12 bg-blue-100 rounded-full flex items-center justify-center">
                <ListBulletIcon className="w-6 h-6 text-blue-600" />
              </div>
            </div>
          </Card>
          
          <Card className="p-6">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-sm text-slate-600">Active Projects</p>
                <p className="text-2xl font-bold text-slate-800">{portfolio.activeProjects}</p>
              </div>
              <div className="w-12 h-12 bg-green-100 rounded-full flex items-center justify-center">
                <div className="w-3 h-3 bg-green-500 rounded-full animate-pulse" />
              </div>
            </div>
          </Card>
          
          <Card className="p-6">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-sm text-slate-600">Total Budget</p>
                <p className="text-2xl font-bold text-slate-800">
                  £{(portfolio.totalBudget / 1000000).toFixed(1)}M
                </p>
              </div>
              <div className="w-12 h-12 bg-yellow-100 rounded-full flex items-center justify-center">
                <span className="text-yellow-600 font-bold">£</span>
              </div>
            </div>
          </Card>
          
          <Card className="p-6">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-sm text-slate-600">Avg Progress</p>
                <p className="text-2xl font-bold text-slate-800">
                  {Math.round(portfolio.averageProgress)}%
                </p>
              </div>
              <div className="w-12 h-12 bg-purple-100 rounded-full flex items-center justify-center">
                <div className="w-8 h-8 border-4 border-purple-200 border-t-purple-600 rounded-full animate-spin" />
              </div>
            </div>
          </Card>
        </div>
      )}

      {/* Controls */}
      <div className="flex flex-col sm:flex-row justify-between items-start sm:items-center gap-4">
        <div className="flex flex-col sm:flex-row items-start sm:items-center gap-4 flex-1">
          {/* Search */}
          <div className="relative">
            <MagnifyingGlassIcon className="absolute left-3 top-1/2 transform -translate-y-1/2 w-4 h-4 text-slate-400" />
            <input
              type="text"
              placeholder="Search projects..."
              value={searchTerm}
              onChange={(e) => setSearchTerm(e.target.value)}
              className="pl-10 pr-4 py-2 border border-slate-300 rounded-md focus:outline-none focus:ring-2 focus:ring-primary focus:border-transparent"
            />
          </div>

          {/* Status Filter */}
          <select
            value={statusFilter}
            onChange={(e) => setStatusFilter(e.target.value as ProjectStatus | 'ALL')}
            className="px-3 py-2 border border-slate-300 rounded-md focus:outline-none focus:ring-2 focus:ring-primary focus:border-transparent"
            aria-label="Filter projects by status"
          >
            <option value="ALL">All Status</option>
            <option value="PLANNING">Planning</option>
            <option value="ACTIVE">Active</option>
            <option value="ON_HOLD">On Hold</option>
            <option value="COMPLETED">Completed</option>
            <option value="CANCELLED">Cancelled</option>
          </select>

          {/* Sort */}
          <select
            value={`${sortBy}-${sortOrder}`}
            onChange={(e) => {
              const [key, order] = e.target.value.split('-');
              setSortBy(key as SortKey);
              setSortOrder(order as 'asc' | 'desc');
            }}
            className="px-3 py-2 border border-slate-300 rounded-md focus:outline-none focus:ring-2 focus:ring-primary focus:border-transparent"
            aria-label="Sort projects"
          >
            <option value="startDate-desc">Newest First</option>
            <option value="startDate-asc">Oldest First</option>
            <option value="name-asc">Name A-Z</option>
            <option value="name-desc">Name Z-A</option>
            <option value="budget-desc">Highest Budget</option>
            <option value="budget-asc">Lowest Budget</option>
            <option value="progress-desc">Most Complete</option>
            <option value="progress-asc">Least Complete</option>
          </select>
        </div>

        <div className="flex items-center gap-2">
          {/* View Mode Toggle */}
          <div className="flex border border-slate-300 rounded-md overflow-hidden">
            <button
              onClick={() => setViewMode('grid')}
              className={`px-3 py-2 text-sm ${
                viewMode === 'grid' 
                  ? 'bg-primary text-white' 
                  : 'bg-white text-slate-600 hover:bg-slate-50'
              }`}
              aria-label="Grid view"
              title="Grid view"
            >
              <ListBulletIcon className="w-4 h-4" />
            </button>
            <button
              onClick={() => setViewMode('map')}
              className={`px-3 py-2 text-sm ${
                viewMode === 'map' 
                  ? 'bg-primary text-white' 
                  : 'bg-white text-slate-600 hover:bg-slate-50'
              }`}
              aria-label="Map view"
              title="Map view"
            >
              <MapIcon className="w-4 h-4" />
            </button>
          </div>

          {/* Create Project Button */}
          {canCreateProjects && (
            <Button
              onClick={() => setShowCreateModal(true)}
              className="flex items-center gap-2"
            >
              <PlusIcon className="w-4 h-4" />
              New Project
            </Button>
          )}
        </div>
      </div>

      {error && (
        <div className="bg-red-50 border border-red-200 rounded-md p-4">
          <p className="text-red-800">{error}</p>
        </div>
      )}

      {/* Projects Display */}
      {viewMode === 'grid' ? (
        <div className="space-y-4">
          {filteredProjects.length === 0 ? (
            <Card className="p-12 text-center">
              <p className="text-slate-600 mb-4">
                {projects.length === 0 
                  ? 'No projects found. Create your first project to get started!'
                  : 'No projects match your current filters.'
                }
              </p>
              {canCreateProjects && projects.length === 0 && (
                <Button onClick={() => setShowCreateModal(true)}>
                  Create First Project
                </Button>
              )}
            </Card>
          ) : (
            <div className="grid grid-cols-1 lg:grid-cols-2 xl:grid-cols-3 gap-6">
              {filteredProjects.map((project) => (
                <ProjectCard
                  key={project.id}
                  project={project}
                  onClick={() => setSelectedProject(project)}
                />
              ))}
            </div>
          )}
        </div>
      ) : (
        <ProjectsMapView 
          projects={filteredProjects} 
          onProjectSelect={setSelectedProject}
        />
      )}

      {/* Create Project Modal */}
      {showCreateModal && (
        <CreateProjectModal
          user={user}
          onClose={() => setShowCreateModal(false)}
          onSuccess={handleCreateProject}
        />
      )}
    </div>
  );
};

export default ProjectsView;