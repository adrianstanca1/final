import React, { useState, useEffect, useCallback, useMemo, useRef } from 'react';
import { User, Project, Todo, Role, Permission, TodoStatus, TodoPriority } from '../types';
import { api } from '../services/mockApi';
import { hasPermission } from '../services/auth';
import { Card } from './ui/Card';
import { PriorityDisplay } from './ui/PriorityDisplay';
import { Button } from './ui/Button';
import { ViewHeader } from './layout/ViewHeader';

interface AllTasksViewProps {
  user: User;
  addToast: (message: string, type: 'success' | 'error') => void;
  isOnline: boolean;
}

const AllTasksView: React.FC<AllTasksViewProps> = ({ user, addToast, isOnline }) => {
  const [tasks, setTasks] = useState<Todo[]>([]);
  const [projects, setProjects] = useState<Project[]>([]);
  const [filteredTasks, setFilteredTasks] = useState<Todo[]>([]);
  const [isLoading, setIsLoading] = useState(true);
  const [showCreateModal, setShowCreateModal] = useState(false);
  const [searchQuery, setSearchQuery] = useState('');
  const [filterStatus, setFilterStatus] = useState<TaskStatus | 'all'>('all');
  const [filterProject, setFilterProject] = useState<string | 'all'>('all');
  const [filterPriority, setFilterPriority] = useState<TaskPriority | 'all'>('all');
  const [filterAssignee, setFilterAssignee] = useState<string | 'all'>('all');
  const [sortBy, setSortBy] = useState<'title' | 'dueDate' | 'priority' | 'status'>('dueDate');
  const [sortDirection, setSortDirection] = useState<'asc' | 'desc'>('asc');
  const [users, setUsers] = useState<User[]>([]);
  const [selectedTask, setSelectedTask] = useState<Todo | null>(null);
  
  // Fetch tasks, projects, and users
  useEffect(() => {
    const loadData = async () => {
      if (!user?.companyId) return;
      
      setIsLoading(true);
      try {
        const [tasksData, projectsData, usersData] = await Promise.all([
          api.getAllTasks(user.companyId),
          api.getProjectsByCompany(user.companyId),
          api.getUsersByCompany(user.companyId)
        ]);
        
        setTasks(tasksData);
        setProjects(projectsData);
        setUsers(usersData);
      } catch (error) {
        console.error('Error loading tasks data:', error);
        addToast('Failed to load tasks. Please try again.', 'error');
      } finally {
        setIsLoading(false);
      }
    };
    
    loadData();
  }, [user, addToast]);
  
  // Apply filters, search, and sorting
  useEffect(() => {
    let result = [...tasks];
    
    // Apply status filter
    if (filterStatus !== 'all') {
      result = result.filter(task => task.status === filterStatus);
    }
    
    // Apply project filter
    if (filterProject !== 'all') {
      result = result.filter(task => task.projectId === filterProject);
    }
    
    // Apply priority filter
    if (filterPriority !== 'all') {
      result = result.filter(task => task.priority === filterPriority);
    }
    
    // Apply assignee filter
    if (filterAssignee !== 'all') {
      result = result.filter(task => task.assigneeId === filterAssignee);
    }
    
    // Apply search query
    if (searchQuery) {
      const query = searchQuery.toLowerCase();
      result = result.filter(task => 
        task.title.toLowerCase().includes(query) ||
        task.description?.toLowerCase().includes(query)
      );
    }
    
    // Apply sorting
    result.sort((a, b) => {
      if (sortBy === 'title') {
        return sortDirection === 'asc' 
          ? a.title.localeCompare(b.title) 
          : b.title.localeCompare(a.title);
      } 
      else if (sortBy === 'dueDate') {
        const dateA = a.dueDate ? new Date(a.dueDate).getTime() : Number.MAX_SAFE_INTEGER;
        const dateB = b.dueDate ? new Date(b.dueDate).getTime() : Number.MAX_SAFE_INTEGER;
        return sortDirection === 'asc' ? dateA - dateB : dateB - dateA;
      }
      else if (sortBy === 'priority') {
        const priorityOrder = {
          [TaskPriority.LOW]: 1,
          [TaskPriority.MEDIUM]: 2,
          [TaskPriority.HIGH]: 3,
          [TaskPriority.URGENT]: 4
        };
        
        return sortDirection === 'asc'
          ? priorityOrder[a.priority] - priorityOrder[b.priority]
          : priorityOrder[b.priority] - priorityOrder[a.priority];
      }
      else if (sortBy === 'status') {
        const statusOrder = {
          [TaskStatus.TODO]: 1,
          [TaskStatus.IN_PROGRESS]: 2,
          [TaskStatus.REVIEW]: 3,
          [TaskStatus.BLOCKED]: 4,
          [TaskStatus.COMPLETED]: 5,
          [TaskStatus.CANCELLED]: 6
        };
        
        return sortDirection === 'asc'
          ? statusOrder[a.status] - statusOrder[b.status]
          : statusOrder[b.status] - statusOrder[a.status];
      }
      
      return 0;
    });
    
    setFilteredTasks(result);
  }, [tasks, filterStatus, filterProject, filterPriority, filterAssignee, searchQuery, sortBy, sortDirection]);
  
  // Helper to get project name
  const getProjectName = useCallback((projectId: string) => {
    const project = projects.find(p => p.id === projectId);
    return project?.name || 'Unknown Project';
  }, [projects]);
  
  // Helper to get user name
  const getUserName = useCallback((userId?: string) => {
    if (!userId) return 'Unassigned';
    const user = users.find(u => u.id === userId);
    return user ? `${user.firstName} ${user.lastName}` : 'Unknown User';
  }, [users]);
  
  // Handle task creation
  const handleTaskCreated = (newTask: Todo) => {
    setTasks(prev => [...prev, newTask]);
    addToast('Task created successfully!', 'success');
    setShowCreateModal(false);
  };
  
  // Handle task status update
  const handleStatusChange = async (taskId: string, newStatus: TaskStatus) => {
    try {
      await api.updateTaskStatus(taskId, newStatus);
      setTasks(prev => prev.map(task => 
        task.id === taskId ? { ...task, status: newStatus } : task
      ));
      addToast('Task status updated successfully!', 'success');
    } catch (error) {
      console.error('Error updating task status:', error);
      addToast('Failed to update task status. Please try again.', 'error');
    }
  };
  
  // Handle task deletion
  const handleDeleteTask = async (taskId: string) => {
    if (!window.confirm('Are you sure you want to delete this task? This action cannot be undone.')) {
      return;
    }
    
    try {
      await api.deleteTask(taskId);
      setTasks(prev => prev.filter(task => task.id !== taskId));
      addToast('Task deleted successfully!', 'success');
    } catch (error) {
      console.error('Error deleting task:', error);
      addToast('Failed to delete task. Please try again.', 'error');
    }
  };
  
  // Handle sort change
  const handleSortChange = (e: React.ChangeEvent<HTMLSelectElement>) => {
    const [newSortBy, newSortDirection] = e.target.value.split('-') as [
      'title' | 'dueDate' | 'priority' | 'status',
      'asc' | 'desc'
    ];
    setSortBy(newSortBy);
    setSortDirection(newSortDirection);
  };
  
  // Render loading state
  if (isLoading) {
    return (
      <div className="container mx-auto px-4 py-8">
        <ViewHeader title="All Tasks" />
        <div className="flex justify-center items-center h-64">
          <div className="animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-blue-500"></div>
        </div>
      </div>
    );
  }

  return (
    <div className="container mx-auto px-4 py-8">
      <div className="flex justify-between items-center mb-6">
        <ViewHeader title="All Tasks" />
        
        <div className="flex gap-3">
          {hasPermission(user, Permission.MANAGE_TASKS) && (
            <Button onClick={() => setShowCreateModal(true)} disabled={!isOnline}>
              {isOnline ? 'New Task' : 'New Task (Offline)'}
            </Button>
          )}
        </div>
      </div>

      <div className="mb-6 grid grid-cols-1 md:grid-cols-2 gap-4">
        <div>
          <input
            type="text"
            placeholder="Search tasks..."
            value={searchQuery}
            onChange={(e) => setSearchQuery(e.target.value)}
            className="w-full p-3 border border-gray-300 rounded-md shadow-sm focus:ring-blue-500 focus:border-blue-500"
          />
        </div>
        <div className="grid grid-cols-2 gap-4">
          <select
            value={`${sortBy}-${sortDirection}`}
            onChange={handleSortChange}
            className="p-3 border border-gray-300 rounded-md shadow-sm bg-white focus:ring-blue-500 focus:border-blue-500"
          >
            <option value="title-asc">Title A-Z</option>
            <option value="title-desc">Title Z-A</option>
            <option value="dueDate-asc">Due Date (Earliest)</option>
            <option value="dueDate-desc">Due Date (Latest)</option>
            <option value="priority-asc">Priority (Low to High)</option>
            <option value="priority-desc">Priority (High to Low)</option>
            <option value="status-asc">Status (To Do → Completed)</option>
            <option value="status-desc">Status (Completed → To Do)</option>
          </select>
          
          <div className="flex gap-2">
            <select
              value={filterStatus}
              onChange={(e) => setFilterStatus(e.target.value as TaskStatus | 'all')}
              className="p-3 border border-gray-300 rounded-md shadow-sm bg-white focus:ring-blue-500 focus:border-blue-500 w-full"
            >
              <option value="all">All Statuses</option>
              <option value={TaskStatus.TODO}>To Do</option>
              <option value={TaskStatus.IN_PROGRESS}>In Progress</option>
              <option value={TaskStatus.REVIEW}>Review</option>
              <option value={TaskStatus.BLOCKED}>Blocked</option>
              <option value={TaskStatus.COMPLETED}>Completed</option>
              <option value={TaskStatus.CANCELLED}>Cancelled</option>
            </select>
          </div>
        </div>
      </div>
      
      <div className="grid grid-cols-1 md:grid-cols-3 gap-4 mb-6">
        <select
          value={filterProject}
          onChange={(e) => setFilterProject(e.target.value)}
          className="p-3 border border-gray-300 rounded-md shadow-sm bg-white focus:ring-blue-500 focus:border-blue-500"
        >
          <option value="all">All Projects</option>
          {projects.map(project => (
            <option key={project.id} value={project.id}>{project.name}</option>
          ))}
        </select>
        
        <select
          value={filterPriority}
          onChange={(e) => setFilterPriority(e.target.value as TaskPriority | 'all')}
          className="p-3 border border-gray-300 rounded-md shadow-sm bg-white focus:ring-blue-500 focus:border-blue-500"
        >
          <option value="all">All Priorities</option>
          <option value={TaskPriority.LOW}>Low</option>
          <option value={TaskPriority.MEDIUM}>Medium</option>
          <option value={TaskPriority.HIGH}>High</option>
          <option value={TaskPriority.URGENT}>Urgent</option>
        </select>
        
        <select
          value={filterAssignee}
          onChange={(e) => setFilterAssignee(e.target.value)}
          className="p-3 border border-gray-300 rounded-md shadow-sm bg-white focus:ring-blue-500 focus:border-blue-500"
        >
          <option value="all">All Assignees</option>
          <option value="">Unassigned</option>
          {users.map(user => (
            <option key={user.id} value={user.id}>{user.firstName} {user.lastName}</option>
          ))}
        </select>
      </div>

      {filteredTasks.length === 0 ? (
        <div className="bg-white p-8 rounded-lg shadow text-center">
          <h3 className="text-xl font-semibold mb-2">No tasks found</h3>
          <p className="text-gray-600 mb-4">
            {searchQuery || filterStatus !== 'all' || filterProject !== 'all' || filterPriority !== 'all' || filterAssignee !== 'all'
              ? 'Try adjusting your search or filters'
              : 'Create a new task to get started'}
          </p>
          {hasPermission(user, Permission.MANAGE_TASKS) && (
            <Button onClick={() => setShowCreateModal(true)} disabled={!isOnline}>
              Create New Task
            </Button>
          )}
        </div>
      ) : (
        <div className="overflow-x-auto">
          <table className="min-w-full divide-y divide-gray-200">
            <thead className="bg-gray-50">
              <tr>
                <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Task</th>
                <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Project</th>
                <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Assignee</th>
                <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Due Date</th>
                <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Priority</th>
                <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Status</th>
                <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Actions</th>
              </tr>
            </thead>
            <tbody className="bg-white divide-y divide-gray-200">
              {filteredTasks.map(task => (
                <tr key={task.id} className="hover:bg-gray-50">
                  <td className="px-6 py-4">
                    <div className="text-sm font-medium text-gray-900">{task.title}</div>
                    {task.description && (
                      <div className="text-sm text-gray-500 truncate max-w-xs">{task.description}</div>
                    )}
                  </td>
                  <td className="px-6 py-4 text-sm text-gray-500">{getProjectName(task.projectId)}</td>
                  <td className="px-6 py-4 text-sm text-gray-500">{getUserName(task.assigneeId)}</td>
                  <td className="px-6 py-4 text-sm text-gray-500">
                    {task.dueDate 
                      ? new Date(task.dueDate).toLocaleDateString() 
                      : 'No due date'}
                  </td>
                  <td className="px-6 py-4 text-sm">
                    <span className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${
                      task.priority === TaskPriority.URGENT
                        ? 'bg-red-100 text-red-800'
                        : task.priority === TaskPriority.HIGH
                        ? 'bg-orange-100 text-orange-800'
                        : task.priority === TaskPriority.MEDIUM
                        ? 'bg-yellow-100 text-yellow-800'
                        : 'bg-green-100 text-green-800'
                    }`}>
                      {task.priority}
                    </span>
                  </td>
                  <td className="px-6 py-4 text-sm">
                    <select
                      value={task.status}
                      onChange={(e) => handleStatusChange(task.id, e.target.value as TaskStatus)}
                      disabled={!isOnline || !hasPermission(user, Permission.MANAGE_TASKS)}
                      className="p-1 text-sm border border-gray-300 rounded bg-white"
                    >
                      <option value={TaskStatus.TODO}>To Do</option>
                      <option value={TaskStatus.IN_PROGRESS}>In Progress</option>
                      <option value={TaskStatus.REVIEW}>Review</option>
                      <option value={TaskStatus.BLOCKED}>Blocked</option>
                      <option value={TaskStatus.COMPLETED}>Completed</option>
                      <option value={TaskStatus.CANCELLED}>Cancelled</option>
                    </select>
                  </td>
                  <td className="px-6 py-4 text-sm font-medium">
                    <div className="flex space-x-2">
                      <Button
                        onClick={() => setSelectedTask(task)}
                        variant="outline"
                        size="sm"
                      >
                        View
                      </Button>
                      {hasPermission(user, Permission.MANAGE_TASKS) && (
                        <Button
                          onClick={() => handleDeleteTask(task.id)}
                          variant="danger"
                          size="sm"
                          disabled={!isOnline}
                        >
                          Delete
                        </Button>
                      )}
                    </div>
                  </td>
                </tr>
              ))}
            </tbody>
          </table>
        </div>
      )}

      {/* Task Modal would be implemented here */}
      {/* {showCreateModal && (
        <TaskModal 
          onClose={() => setShowCreateModal(false)} 
          onSuccess={handleTaskCreated}
          user={user}
          projects={projects}
          users={users}
          addToast={addToast}
        />
      )}
      
      {selectedTask && (
        <TaskModal 
          onClose={() => setSelectedTask(null)} 
          onSuccess={(updatedTask) => {
            setTasks(prev => prev.map(task => 
              task.id === updatedTask.id ? updatedTask : task
            ));
            setSelectedTask(null);
            addToast('Task updated successfully!', 'success');
          }}
          user={user}
          task={selectedTask}
          projects={projects}
          users={users}
          addToast={addToast}
        />
      )} */}
    </div>
  );
};

export default AllTasksView;